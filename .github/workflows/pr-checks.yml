# .github/workflows/pr-checks.yml
name: PR Checks and Main Branch Docker Push

permissions:
  actions: read
  contents: read      # CodeQL, Docker build, Gitleaks ve testler için kodu checkout etme izni
  security-events: write # CodeQL ve Trivy SARIF sonuçlarını Güvenlik sekmesine yükleme izni
  packages: write      # GHCR'ye imaj gönderebilmek için GITHUB_TOKEN'a yazma izni

on:
  pull_request_target:
    types: [ opened, synchronize, reopened ]
    branches: [ main ]
  push:
    branches:
      - main # 'main' branch'i için push olaylarında tetiklenir

jobs:
  analyze_and_scan_pr:
    name: Code Quality, SAST, SCA (Pull Request)
    if: github.event_name == 'pull_request_target'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository (Pull Request Head)
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Python dependencies for analysis
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 pytest pytest-cov bandit gitleaks

      - name: Lint with Flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Daha katı kurallar için: flake8 . --count --max-complexity=10 --max-line-length=100 --statistics || exit 1

      - name: Run unit tests with Pytest and generate coverage
        run: |
          pytest --cov=./ --cov-report=xml

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }} # CODECOV_TOKEN'ınızı GitHub secrets'a ekleyin
          files: ./coverage.xml
        # fail_ci_if_error: true # İsteğe bağlı: Codecov yüklemesi başarısız olursa CI'ı durdur

      - name: Scan for hardcoded secrets with Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }} # Gerekirse

      - name: Run Bandit SAST scanner
        run: |
          bandit -r . -f sarif -o bandit-results.sarif || echo "Bandit found issues, review results."
          # Bandit bulgularının PR'ı engellemesini isterseniz '|| exit 1' ekleyebilirsiniz.

      - name: Upload Bandit SARIF results
        if: success() || failure()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'bandit-results.sarif'
          category: 'bandit'

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python

      - name: Autobuild (for CodeQL)
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Build Docker image for PR
        id: docker_build_pr
        run: |
          IMAGE_TAG="pr-${{ github.event.pull_request.number }}"
          docker build -t guvenli-not-defteri-pr:$IMAGE_TAG .
          echo "IMAGE_NAME_WITH_TAG_PR=guvenli-not-defteri-pr:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Run Trivy vulnerability scanner on PR image
        uses: aquasec/trivy-action@0.24.0
        with:
          image-ref: ${{ env.IMAGE_NAME_WITH_TAG_PR }}
          format: 'sarif' # SARIF formatında çıktı alalım
          output: 'trivy-pr-results.sarif'
          exit-code: '1' # Yüksek veya Kritik zafiyet varsa PR'ı engelle
          ignore-unfixed: true
          severity: 'HIGH,CRITICAL'

      - name: Upload Trivy PR scan results to GitHub Security tab
        if: success() || failure() # Tarama başarısız olsa bile sonuçları yükle
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-pr-results.sarif'
          category: 'trivy-pr'

  build_and_push_to_ghcr:
    name: Build and Push Docker image to GHCR (Main Branch)
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [analyze_and_scan_pr] # PR birleştiğinde, önceki job'un başarılı olmasını bekle (opsiyonel, push direkt main'e ise kaldırılabilir)

    steps:
      - name: Checkout repository (Main Branch)
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/guvenli-not-defteri
          tags: |
            type=sha,prefix=,suffix=,format=short
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Check for DUMMY_API_KEY Secret (Example placeholder)
        run: |
          if [ -z "${{ secrets.DUMMY_API_KEY }}" ]; then # Eğer DUMMY_API_KEY boşsa veya tanımlı değilse
            echo "CRITICAL: DUMMY_API_KEY secret is NOT configured for main branch!"
            exit 1 # Main branch için bu secret kritikse build'i durdur
          else
            echo "Dummy API Key secret is configured."
            # echo "First 3 chars of API Key: ${{ secrets.DUMMY_API_KEY:0:3 }}***" # Hassas bilgi loglamaktan kaçının
          fi
          # GERÇEK UYGULAMADA BU ADIMI GERÇEK GİZLİ BİLGİ YÖNETİM STRATEJİNİZLE DEĞİŞTİRİN

      - name: Build Docker image for main branch
        id: docker_build_main
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false # Henüz push etme, önce tara
          load: true  # İmajı sonraki adımda taramak için yerel Docker'a yükle
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Run Trivy vulnerability scanner on main image before push
        uses: aquasec/trivy-action@0.24.0
        with:
          image-ref: ${{ steps.meta.outputs.tags }} # Docker build adımında oluşturulan etiketi kullan
          format: 'sarif'
          output: 'trivy-main-results.sarif'
          exit-code: '1' # Sadece Kritik zafiyet varsa durdur (daha katı olabilirsiniz)
          ignore-unfixed: true
          severity: 'CRITICAL'

      - name: Upload Trivy main scan results to GitHub Security tab
        if: success() || failure()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-main-results.sarif'
          category: 'trivy-main'

      - name: Push Docker image to GHCR (if all checks passed)
        # Bu adım sadece bir önceki Trivy taraması ve diğer kontroller başarılı olduysa çalışır
        # (Trivy'nin exit-code: '1' ayarı sayesinde)
        if: success() # Tüm adımlar başarılıysa push et
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true # Şimdi push et
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}